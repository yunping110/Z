登录系统 ：提示网络错误，请稍后重试，阻止后关闭策略也不能登录
退出系统 ：提示网络错误，请稍后重试
导入商品 ：提示网络错误，请稍后重试
导入会员 ：提示网络错误，请稍后重试
导出banner ：无反应
导出会员 ：无反应
导出分类 ：无反应
导出商品 ：无反应
导出订单 ：无反应
APP制作 ：提示网络错误，请稍后重试
添加banner ：提示网络错误，请稍后重试
添加会员 ：提示网络错误，请稍后重试
添加分类 ：提示网络错误，请稍后重试
添加商品 ：提示网络错误，请稍后重试
添加客服 ：提示网络错误，请稍后重试
添加推送 ：提示网络错误，请稍后重试
添加角色 ：提示网络错误，请稍后重试
添加订单 ：提示网络错误，请稍后重试
添加账户 ：提示网络错误，请稍后重试
编写文章 ：提示网络错误，请稍后重试
编辑会员 ：提示网络错误，请稍后重试
删除banner ：提示网络错误，请稍后重试
删除会员 ：提示网络错误，请稍后重试
删除分类 ：提示网络错误，请稍后重试
删除商品 ：提示网络错误，请稍后重试
删除文章 提示网络错误，请稍后重试
删除角色 ：提示网络错误，请稍后重试
删除订单 ：提示网络错误，请稍后重试
发送短信 ：提示网络错误，请稍后重试
回复评论 
修改分类状态 ：提示网络错误，请稍后重试
修改商品分类 ：提示网络错误，请稍后重试
启用/禁用banner ：提示网络错误，请稍后重试
商品上下架操作 ：提示网络错误，请稍后重试
将分类推荐到首页设置 ：提示网络错误，请稍后重试
微信支付管理 ：提示网络错误，请稍后重试
微信网页支付管理 ：提示网络错误，请稍后重试
推送设置 ：提示网络错误，请稍后重试
支付宝支付管理 ：提示网络错误，请稍后重试
编辑banner ：提示网络错误，请稍后重试
编辑分类 ：提示网络错误，请稍后重试
编辑商品 ：提示网络错误，请稍后重试
编辑角色 ：提示网络错误，请稍后重试
编辑订单 ：提示网络错误，请稍后重试
编辑运费模板 ：提示网络错误，请稍后重试
设置评论 ：提示网络错误，请稍后重试
软件测试是伴随着软件的产生而产生的。早期的软件开发过程中软件规模都很小、复杂程度低，软件开发的过程混乱无序、相当随意，测试的含义比较狭窄，开发人员将测试等同于“调试”，目的是纠正软件中已经知道的故障，常常由开发人员自己完成这部分的工作。对测试的投入极少，测试介入也晚，常常是等到形成代码，产品已经基本完成时才进行测试。到了上世纪80年代初期，软件和IT行业进入了大发展，软件趋向大型化、高复杂度，软件的质量越来越重要。这个时候，一些软件测试的基础理论和实用技术开始形成，并且人们开始为软件开发设计了各种流程和管理方法，软件开发的方式也逐渐由混乱无序的开发过程过渡到结构化的开发过程，以结构化分析与设计、结构化评审、结构化程序设计以及结构化测试为特征。人们还将“质量”的概念融入其中，软件测试定义发生了改变，测试不单纯是一个发现错误的过程，而且将测试作为软件质量保证(SQA)的主要职能，包含软件质量评价的内容，Bill Hetzel在《软件测试完全指南》(Complete Guide of Software Testing)一书中指出：“测试是以评价一个程序或者系统属性为目标的任何一种活动。测试是对软件质量的度量。”这个定义至今仍被引用。软件开发人员和测试人员开始坐在一起探讨软件工程和测试问题。
软件测试已有了行业标准(IEEE/ANSI )，1983年IEEE提出的软件工程术语中给软件测试下的定义是：“使用人工或自动的手段来运行或测定某个软件系统的过程，其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别”。这个定义明确指出:软件测试的目的是为了检验软件系统是否满足需求。它再也不是一个一次性的，而且只是开发后期的活动，而是与整个开发流程融合成一体。软件测试已成为一个专业，需要运用专门的方法和手段，需要专门人才和专家来承担。
进入上世纪90年代，软件行业开始迅猛发展，软件的规模变的非常大，在一些大型软件开发过程中，测试活动需要花费大量的时间和成本，而当时测试的手段几乎完全都是手工测试，测试的效率非常低;并且随着软件复杂度的提高，出现了很多通过手工方式无法完成测试的情况，尽管在一些大型软件的开发过程中，人们尝试编写了一些小程序来辅助测试，但是这还是不能满足大多数软件项目的统一需要。于是，很多测试实践者开始尝试开发商业的测试工具来支持测试，辅助测试人员完成某一类型或某一领域内的测试工作，而测试工具逐渐盛行起来。人们普遍意识到，工具不仅仅是有用的，而且要对今天的软件系统进行充分的测试，工具是必不可少的。测试工具可以进行部分的测试设计、实现、执行和比较的工作。通过运用测试工具，可以达到提高测试效率的目的。测试工具的发展，大大提高了软件测试的自动化程度，让测试人员从繁琐和重复的测试活动中解脱出来，专心从事有意义的测试设计等活动。采用自动比较技术，还可以自动完成测试用例执行结果的判断，从而避免人工比对存在的疏漏问题。设计良好的自动化测试，在某些情况下可以实现 “ 夜间测试 ” 和 “ 无人测试 ” 。在大多数情况下，软件测试自动化可以减少开支，增加有限时间内可执行的测试，在执行相同数量测试时节约测试时间。 而测试工具的选择和推广也越来越受到重视。在软件测试工具平台方面，商业化的软件测试工具已经很多，如捕获/回放工具、Web测试工具、性能测试工具、测试管理工具、代码测试工具等等，这些都有严格的版权限制且价格较为昂贵，但由于价格和版权的限制无法自由使用，当然，一些软件测试工具开发商对于某些测试工具提供了Beta测试版本以供用户有限次数使用。幸运的是，在开放源码社区中也出现了许多软件测试工具，已得到广泛应用且相当成熟和完善。